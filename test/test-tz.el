;;; -*- coding: utf-8; lexical-binding: t; -*-

(defun pg-run-tz-tests (con)
  (pg-exec con "DROP TABLE IF EXISTS tz_test")
  (pg-exec con "CREATE TABLE tz_test(id INTEGER PRIMARY KEY, ts TIMESTAMP, tstz TIMESTAMPTZ)")
  (let ((tz-orig (getenv "TZ")))
    (setenv "TZ" "Berlin/Germany")
    (unwind-protect
        (progn
          (test-iso8601-regexp)
          (test-parse con)
          (test-serialize con)
          (test-insert-literal con)
          (test-insert-parsed con))
      (setenv "TZ" tz-orig)
      (pg-exec con "DROP TABLE tz_test"))))

(defun test-iso8601-regexp ()
  (message "Test iso8601 regexp ...")
  (let ((regexp pg--ISODATE_REGEX))
    (assert-does-not-match "" regexp)
    (assert-does-not-match "2024-02-2711:34:42.789+04" regexp)
    (assert-does-not-match "2024-02-27T11:34:42+4" regexp)
    (assert-matches "2024-02-27T11:34:42.78901+04:00" regexp)
    (assert-matches "2024-02-27 11:34:42.78901+04:00" regexp)
    (assert-matches "2024-02-27T11:34:42.78901" regexp)
    (assert-matches "2024-02-27T11:34:42+04" regexp)
    (assert-matches "2024-02-27T11:34:42" regexp)
    (assert-matches "2024-02-27 11:34:42" regexp)
    (assert-matches "2024-02-27T11:34:42.78901+04:30" regexp)
    (assert-matches "2024-02-27T11:34:42.78901+04" regexp)
    (assert-matches "2024-02-27T11:34:42.78901+0430" regexp)
    (assert-matches "2024-02-27T11:34:42.78901Z" regexp)
    (assert-matches "2024-02-27T11:34:42.78901z" regexp)))

(defun test-parse (con)
  (message "Test parsing of timestamps ...")
  (let ((ts (pg-isodate-without-timezone-parser "2024-02-27T11:34:42.789+04" nil))
        (ts-dst (pg-isodate-without-timezone-parser "2024-05-27T11:34:42.789+04" nil))
        (ts-no-tz (pg-isodate-without-timezone-parser "2024-02-27T11:34:42.789" nil))
        (ts-zulu (pg-isodate-without-timezone-parser "2024-02-27T11:34:42.789Z" nil))
        (tstz (pg-isodate-with-timezone-parser "2024-02-27T15:34:42.789+04" nil))
        (tstz-dst (pg-isodate-with-timezone-parser "2024-05-27T15:34:42.789+04" nil))
        (tstz-no-tz (pg-isodate-with-timezone-parser "2024-02-27T15:34:42.789" nil))
        (tstz-zulu (pg-isodate-with-timezone-parser "2024-02-27T15:34:42.789Z" nil)))
    (assert-equals "2024-02-27T11:34:42.789+0000" (fmt-ts-utc ts))
    (assert-equals "2024-05-27T11:34:42.789+0000" (fmt-ts-utc ts-dst))
    (assert-equals "2024-02-27T11:34:42.789+0000" (fmt-ts-utc ts-no-tz))
    (assert-equals "2024-02-27T11:34:42.789+0000" (fmt-ts-utc ts-zulu))
    (assert-equals "2024-02-27T11:34:42.789+0000" (fmt-ts-utc tstz))
    (assert-equals "2024-05-27T11:34:42.789+0000" (fmt-ts-utc tstz-dst))
    (assert-equals "2024-02-27T15:34:42.789+0000" (fmt-ts-utc tstz-no-tz))
    (assert-equals "2024-02-27T15:34:42.789+0000" (fmt-ts-utc tstz-zulu))))

(defun test-serialize (con)
  (message "Test serialization of timestamps ...")
  (let* ((ts (encode-time (iso8601-parse "2024-02-27T15:34:42.789+04" t)))
         (ts-ser (pg--serialize-encoded-time ts nil)))
    (assert-equals "2024-02-27T11:34:42.789000000+0000" ts-ser)))

(defun test-insert-literal (con)
  (message "Test literal (string) timestamp insertion ...")
  ;; We take this as reference. It behaves exactly like psql.
  ;; Entering literals works as expected. Note that we cast to text to rule out deserialization errors.
  (pg-exec con "INSERT INTO tz_test(id, ts, tstz) VALUES(1, '2024-02-27T11:34:42.789+04', '2024-02-27T15:34:42.789+04')")
  (let* ((data (pg-result (pg-exec con "SELECT ts::text, tstz::text FROM tz_test WHERE id=1") :tuple 0))
         (ts (nth 0 data))
         (tstz (nth 1 data)))
    (assert-equals "2024-02-27 11:34:42.789" ts)
    (assert-equals "2024-02-27 11:34:42.789+00" tstz)))

(defun test-insert-parsed (con)
  (message "Test object timestamp insertion ...")
  (pg-exec-prepared con "INSERT INTO tz_test(id, ts, tstz) VALUES(2, $1, $2)"
                    `((,(pg-isodate-without-timezone-parser "2024-02-27T11:34:42.789+04" nil) . "timestamp")
                      (,(pg-isodate-with-timezone-parser "2024-02-27T15:34:42.789+04:00" nil) . "timestamptz")))
  (let* ((data (pg-result (pg-exec con "SELECT ts::text, tstz::text FROM tz_test WHERE id=2") :tuple 0))
         (ts (nth 0 data))
         (tstz (nth 1 data)))
    (assert-equals "2024-02-27 11:34:42.789" ts)
    (assert-equals "2024-02-27 11:34:42.789+00" tstz)))


(defun assert-equals (expected actual)
  (should (string= expected actual)))

(defun assert-matches (str regexp)
  (should (string-match regexp str)))

(defun assert-does-not-match (str regexp)
  (should-not (string-match regexp str)))

(defun fmt-ts-utc (ts)
  (let ((ft "%Y-%m-%dT%H:%M:%S.%3N%z"))
    (format-time-string ft ts "UTC")))
